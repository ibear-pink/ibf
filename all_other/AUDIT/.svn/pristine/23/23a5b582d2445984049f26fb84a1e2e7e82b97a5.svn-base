
/*
 * 功能描述:
 * 创建时间:
 * 编码人员:自动生成
*/

#include "RTOB_MERGERMgr.h"
#include "CDealData.h"
#include "FILE.h"

IMPLEMENT_CLASS(RTOB_MERGERMgr)

RTOB_MERGERMgr::RTOB_MERGERMgr()
{
	
}

RTOB_MERGERMgr::~RTOB_MERGERMgr()
{
	
}

int RTOB_MERGERMgr::init(ibear *br,stAppCfg_Proc_Server *pServerCfg, stAppCfg_System *pInfo, stAppCfg_ParseFile *pParseFile, STOP_COMMON_CONF *conf_info, char *processName,int processNum,int log_thread_num)
{
	int iRet = 0;
	m_Ibear = br;
	char app_pid[10+1] = {0};
	m_CfgInfo = pServerCfg;
	m_ProInfo = pInfo;
	m_logFile = m_CfgInfo->logFile;
	m_InterfaceType = m_CfgInfo->interface_type;
	strcpy(m_TableName,processName);
	SplitString(m_TableName,m_TableName,'=',2);
	printf("%s,%s\n",m_TableName,processName);
	sprintf(app_pid,"%d",getpid());
	iRet = appStart(br,m_ProInfo->ipAddress,m_ProInfo->program_name,m_ProInfo->procUnikey,app_pid);
	if (iRet != 0)
	{
  	printf("进程不允许启动[%s] \n",getErrInfo());
		m_logFile->WriteLog(LOG_FILE_LINE_ERROR,LOG_THREAD_MAIN,"appStart失败[%d][%s,%s,%s,%s]!!!\n",iRet,pInfo->ipAddress,pInfo->procUnikey,pInfo->program_name,app_pid);
  	m_logFile->WriteLog(LOG_FILE_LINE_ERROR,LOG_THREAD_MAIN,"进程不允许启动[%s]",getErrInfo());
  	return -1;
	}
	if (0 != getMergeType())
	{
		return RET_FAIL;
	}
	if (0 != getAuditType())
	{
		return RET_FAIL;
	}
	
	return iRet;
}

int RTOB_MERGERMgr::getAuditType()
{
	int iRet = 0;
	map<string,string> inParams;
	vector<vector<string> > list;
	iRet = m_Ibear->queryForList("SEL_AUDIT_CFG",inParams,&list);
	if (iRet != 0)
	{
		m_logFile->WriteLog(LOG_FILE_LINE_ERROR,LOG_THREAD_MAIN,"getAuditType 获取稽核类型配置错误\n");
		return iRet;
	}

	for (vector<vector<string> >::iterator iter = list.begin();iter != list.end();iter++)
	{
		vector<string> v_row = *iter;
		stAuditCfg *cfg = new stAuditCfg();
		
		strcpy(cfg->audit_id,v_row[0].c_str());
		strcpy(cfg->audit_name,v_row[1].c_str());
		strcpy(cfg->dealcode_type,v_row[2].c_str());
		
		m_AuditCfgs.push_back(cfg);
	}
	
	return iRet;
}

int RTOB_MERGERMgr::getMergeType()
{
	int iRet = 0;
	map<string,string> inParams;
	vector<vector<string> > list;
	iRet = m_Ibear->queryForList("SEL_ALLMERGE_CFG",inParams,&list);
	if (iRet != 0)
	{
		m_logFile->WriteLog(LOG_FILE_LINE_ERROR,LOG_THREAD_MAIN,"getMergeType 获取稽核类型配置错误\n");
		return iRet;
	}
	for (vector<vector<string> >::iterator iter = list.begin();iter != list.end();iter++)
	{
		vector<string> v_row = *iter;
		if (v_row.size() > 0)
		{
			m_MergeCfgs.insert(pair<string,string>(string(v_row[0].c_str()),string(v_row[1].c_str())));
		}
	}
	
	return iRet;
}

int RTOB_MERGERMgr::selectMerge(char *table_name,char *batchsn,char *merge_type,char *day_billcycl,char *region_code,char *audit_id,int *count)
{
	int iRet = 0;
	char ym[6+1] = {0};
	map<string,string> inParams;
	vector<string> v_row;
	
	strncpy(ym,day_billcycl,6);
	inParams.insert(pair<string,string>(string("YM"),string(ym)));
	inParams.insert(pair<string,string>(string("TYPE"),string(table_name)));
	inParams.insert(pair<string,string>(string("BATCHSN"),string(batchsn)));
	inParams.insert(pair<string,string>(string("MERGE_TYPE"),string(merge_type)));
	inParams.insert(pair<string,string>(string("DAY_BILLCYCL"),string(day_billcycl)));
	inParams.insert(pair<string,string>(string("REGION_CODE"),string(region_code)));
	inParams.insert(pair<string,string>(string("AUDIT_ID"),string(audit_id)));
	iRet = m_Ibear->queryForObject("SEL_FRIST",inParams,&v_row);
	if (iRet != 0)
	{
		m_logFile->WriteLog(LOG_FILE_LINE_ERROR,LOG_THREAD_MAIN,"selectMerge ERR_MSG[%s %s]\n",table_name,m_Ibear->sql_error);
		return iRet;
	}
	
	*count = atoi(v_row[0].c_str());
		
	return iRet;
}

int RTOB_MERGERMgr::updateMerge(char *table_name,char *batchsn,char *merge_type,char *day_billcycl,char *region_code,char *audit_id,long record_count,long amount_sum)
{
	int iRet = RET_OK;
	char ym[6+1] = {0};
	char c_record[14+1] = {0};
	char c_amount[14+1] = {0};
	map<string,string> inParams;
	sprintf(c_record,"%ld",record_count);
	sprintf(c_amount,"%ld",amount_sum);
	strncpy(ym,day_billcycl,6);
	inParams.insert(pair<string,string>(string("YM"),string(ym)));
	inParams.insert(pair<string,string>(string("TYPE"),string(table_name)));
	inParams.insert(pair<string,string>(string("BATCHSN"),string(batchsn)));
	inParams.insert(pair<string,string>(string("MERGE_TYPE"),string(merge_type)));
	inParams.insert(pair<string,string>(string("DAY_BILLCYCL"),string(day_billcycl)));
	inParams.insert(pair<string,string>(string("REGION_CODE"),string(region_code)));
	inParams.insert(pair<string,string>(string("AUDIT_ID"),string(audit_id)));
	inParams.insert(pair<string,string>(string("RECORD"),string(c_record)));
	inParams.insert(pair<string,string>(string("AMOUNT"),string(c_amount)));
	inParams.insert(pair<string,string>(string("REC_ATTR"),string("0")));
	
	iRet = m_Ibear->DML("UPD_FRIST",inParams);
	if (iRet != 0)
	{
		printf("ERR_MSG[%s %s]\n",table_name,m_Ibear->sql_error);
		m_logFile->WriteLog(LOG_FILE_LINE_ERROR,LOG_THREAD_MAIN,"updateMerge ERR_MSG[%s %s]\n",table_name,m_Ibear->sql_error);
    iRet = RET_FAIL;
		return iRet;
	}
	return iRet;
}

int RTOB_MERGERMgr::insertMerge(char *table_name,char *batchsn,char *merge_type,char *day_billcycl,char *region_code,char *audit_id,long record_count,long amount_sum)
{
	int iRet = RET_OK;
	char ym[6+1] = {0};
	char c_record[14+1] = {0};
	char c_amount[14+1] = {0};
	map<string,string> inParams;
	sprintf(c_record,"%ld",record_count);
	sprintf(c_amount,"%ld",amount_sum);
	strncpy(ym,day_billcycl,6);
	inParams.insert(pair<string,string>(string("YM"),string(ym)));
	inParams.insert(pair<string,string>(string("TYPE"),string(table_name)));
	inParams.insert(pair<string,string>(string("BATCHSN"),string(batchsn)));
	inParams.insert(pair<string,string>(string("MERGE_TYPE"),string(merge_type)));
	inParams.insert(pair<string,string>(string("DAY_BILLCYCL"),string(day_billcycl)));
	inParams.insert(pair<string,string>(string("REGION_CODE"),string(region_code)));
	inParams.insert(pair<string,string>(string("AUDIT_ID"),string(audit_id)));
	inParams.insert(pair<string,string>(string("RECORD"),string(c_record)));
	inParams.insert(pair<string,string>(string("AMOUNT"),string(c_amount)));
	inParams.insert(pair<string,string>(string("REC_ATTR"),string("0")));
	
	iRet = m_Ibear->DML("INS_FRIST",inParams);
	if (iRet != 0)
	{
		printf("ERR_MSG[%s %s]\n",table_name,m_Ibear->sql_error);
		m_logFile->WriteLog(LOG_FILE_LINE_ERROR,LOG_THREAD_MAIN,"insertMerge ERR_MSG[%s %s]\n",table_name,m_Ibear->sql_error);
    iRet = RET_FAIL;
		return iRet;
	}
	return iRet;
}

int RTOB_MERGERMgr::ProFileContent(char *srcfilename,char *descfilename,map<string,stAuditContent *> *audit_contents)
{
	int iRet = 0;
	char strBuff[4096] = {0};
	char contents[255+1] = {0};//内容
	
	map<string,stAuditContent *> audit_contents_tmp;
	
	//统计数量定义
#ifdef _SDFS_DEAL_FILE_
	SDFS data_file;
	SFILE *pFile = sopen(srcfilename,"r",data_file);
	while(sgets (strBuff, 4096, pFile) != NULL)
#else
	FILE *pFile = fopen(srcfilename,"r");
	while(fgets (strBuff, 4096, pFile) != NULL)
#endif
	{
		char deal_code[4+1] = {0};//给下一环节的工单数char
		int idealNum = 0;//给下一环节的工单数sum(deal_code)
		int vail_code_count = 0;//有效deal_code数量
		int devail_code_count = 0;//无效deal_code数量
		int record_count = 0;//文件条数
		int recordf_count = 0;//优惠条数
		int amount_sum = 0;//消费
		int amountf_sum = 0;//优惠
		string key[20];
		//碰到文件结尾符，直接退出
	#ifdef _DEBUG_INFO_
		printf("%s %d\n",strBuff,strlen(strBuff));
	#endif
		if (strncmp(strBuff,DEF_FILE_END_FLAG,1) == 0)
		{
			m_logFile->WriteLog(LOG_FILE_LINE_INFO,LOG_THREAD_MAIN,"碰到文件结尾符，直接退出\n");
			break;
		}
		//文件字段拆分，标示‘@’
		int cot = SplitString(strBuff,'@',key);
#ifdef _DEBUG_INFO_
	for(int i = 0; i < cot; i++)
	{
		printf("[%d]%s-",i,key[i].c_str());
	}
	printf("\n");
#endif
		string fileheads[10];
		char filehead[20] = {0};
		stAuditContent* audit_content = new stAuditContent();
		strcpy(audit_content->batchsn,key[0].c_str());
#ifdef _DEBUG_INFO_
printf("batchsn:%s\n",audit_content->batchsn);
#endif
		SplitString(audit_content->batchsn,'.',fileheads);
		strcpy(filehead,fileheads[0].c_str());
		strcpy(audit_content->day_billcycl,key[7].c_str());
		strncpy(audit_content->region_code,key[4].c_str(),2);
#ifdef _DEBUG_INFO_
printf("day_billcycl:%s\nregion_code:%s\nmerge_type:%s\n",audit_content->day_billcycl,audit_content->region_code,audit_content->merge_type);
#endif
		strcpy(contents,key[8].c_str());
		strcpy(deal_code,key[11].c_str());
#ifdef _DEBUG_INFO_
	printf("contents:%s\ndeal_code:%s\n",contents,deal_code);
#endif
		for (map<string,string>::iterator iter = m_MergeCfgs.begin();iter != m_MergeCfgs.end();iter++)
		{
			string head = iter->first;
			if (strstr(filehead,head.c_str()) != NULL)
			{
				string type = iter->second;
				strcpy(audit_content->merge_type,type.c_str());
				continue;
			}
		}
		/*对deal_code的统计*/
		if (atoi(deal_code) != 0)//有效
		{
			vail_code_count++;
		}
		else //无效
		{
			devail_code_count++;
		}
		idealNum += atoi(deal_code);//总量
		
		//解析contents字段
		string count[20];
		//按|分割，解析为每行
		int count_h = SplitString(contents,'|',count);
		//若无行标示，不解析详细内容
		if (count_h == 0)
		{
			record_count ++;
			recordf_count ++;
			//continue;
		}
		//解析每一行的内容
		for (int i = 0;i < count_h; i++)
		{
			//每行按单独一条数据，多行做总数累加
			record_count ++;
			recordf_count ++;
			//解析单行的数据，获得金额字段
			string record[100];
			int count_s = SplitString(count[i].c_str(),',',record);
			amount_sum = amount_sum + atol(record[9].c_str());
			amountf_sum = amountf_sum + atol(record[10].c_str());
		}
		
		audit_content->record_count = record_count;
		audit_content->amount_sum = amount_sum;
		audit_content->recordf_count = recordf_count;
		audit_content->amountf_sum = amountf_sum;
		audit_content->idealNum = idealNum;
		audit_content->vail_code_count = vail_code_count;
		audit_content->devail_code_count = devail_code_count;
		
		map<string,stAuditContent *>::iterator tmp = audit_contents_tmp.find(string(audit_content->region_code));
		if(tmp==audit_contents_tmp.end())
		{
			audit_contents_tmp.insert(pair<string,stAuditContent *>(string(audit_content->region_code),audit_content));
		}
		else 
		{
			delete audit_content;
			audit_content = NULL;
			stAuditContent *content = tmp->second;
			content->record_count += record_count;
			content->amount_sum += amount_sum;
			content->recordf_count += recordf_count;
			content->amountf_sum += amountf_sum;
			content->idealNum += idealNum;
			content->vail_code_count += vail_code_count;
			content->devail_code_count += devail_code_count;
		}
	}
	
#ifdef _SDFS_DEAL_FILE_
	if (0 != sfclose (pFile))
	{
		return RET_FAIL;
	}
#else
	if (0 != fclose (pFile))
	{
		return RET_FAIL;
	}
#endif
	pFile = NULL;
	
	*audit_contents = audit_contents_tmp;
	return iRet;
}

int RTOB_MERGERMgr::process()
{
	if (0 == isAppStop(m_ProInfo->ipAddress,m_ProInfo->program_name))
	{
		//可以停止
		if (0 == appStop(m_ProInfo->ipAddress,m_ProInfo->program_name))
		{
	  	printf("进程停止[%s %s]\n",m_ProInfo->ipAddress,m_ProInfo->program_name);
			m_logFile->WriteLog(LOG_FILE_LINE_ERROR,LOG_THREAD_MAIN,"进程停止[%s %s]\n",m_ProInfo->ipAddress,m_ProInfo->program_name);

			exit(0);
		}
	}
#ifdef _SDFS_DEAL_FILE_
	SDFS_GDF_FILE *file = new SDFS_GDF_FILE();
#else
	GDF_FILE *file = new GDF_FILE();
#endif
	int iRet = 0;
	switch (m_InterfaceType)
	{
		case INTERFACE_TYPE_FILE:
		{
			if (0 != file->getFileList(m_CfgInfo->file_cfg_info.indir))
			{
				m_logFile->WriteLog(LOG_FILE_LINE_ERROR,LOG_THREAD_MAIN,"getFileList error\n");
				exit(0);
			}
			m_FileList = file->mFileList;
			if (m_FileList.size() == 0)
			{
				sleep(1);
				return RET_OK;
			}
			m_logFile->WriteLog(LOG_FILE_LINE_INFO,LOG_THREAD_MAIN,"getFileList.size = %ld",m_FileList.size());
			for (vector<stFileInfo*>::iterator it = m_FileList.begin();it<m_FileList.end();it++)
			{
				stFileInfo *f = *it;
				char srcfilename[1024] = {0};
				char descfilename[1024] = {0};
				char errfilename[1024] = {0};
				sprintf(srcfilename,"%s/%s",m_CfgInfo->file_cfg_info.indir,f->sFileName);
				sprintf(errfilename,"%s/%s",m_CfgInfo->file_cfg_info.errdir,f->sFileName);
				sprintf(descfilename,"%s/%s",m_CfgInfo->bak_cfg_info.bakdir,f->sFileName);
				stAuditContent *audit_content = new stAuditContent();

#ifdef _DEBUG_INFO_
	printf("-------\n srcfilename:%s\ndesc:%s\nerr:%s\n",srcfilename,descfilename,errfilename);
#endif
				map<string,stAuditContent *> audit_contents;
				iRet = ProFileContent(srcfilename,descfilename,&audit_contents);
				for (map<string,stAuditContent *>::iterator aucon = audit_contents.begin();aucon != audit_contents.end();aucon++)
				{
					stAuditContent *audit_content = aucon->second;
#ifdef _DEBUG_INFO_
	m_logFile->WriteLog(LOG_FILE_LINE_INFO,LOG_THREAD_MAIN,"工单[消费]条数:%d,金额:%d,[优惠]条数,%d,金额:%d\n",audit_content->record_count,audit_content->amount_sum,audit_content->recordf_count,audit_content->amountf_sum);
	m_logFile->WriteLog(LOG_FILE_LINE_INFO,LOG_THREAD_MAIN,"下环节条数:%d,有效:%d,无效:%d\n",audit_content->idealNum,audit_content->vail_code_count,audit_content->devail_code_count);
#endif
					//信息特殊处理,出账计算单独统计两种类型账单的稽核数据
					char audit_id[20+1] = {0};
					char dealcode_type[2+1] = {0};
	
					for (vector<stAuditCfg*>::iterator it = m_AuditCfgs.begin();it!=m_AuditCfgs.end();it++)
					{
						stAuditCfg *cfg=*it;
						if (strcmp(m_TableName,cfg->audit_name) == 0)
						{
							int c_record = 0;
							long c_amount = 0;
							strcpy(audit_id,cfg->audit_id);
							strcpy(dealcode_type,cfg->dealcode_type);
							if(strcmp(dealcode_type,"0")==0)
							{
								c_record = audit_content->idealNum;
								c_amount = audit_content->amount_sum;
							}
							else if(strcmp(dealcode_type,"1")==0)
							{
								c_record = audit_content->vail_code_count;
								c_amount = audit_content->amount_sum;
							}
							else if(strcmp(dealcode_type,"2")==0)
							{
								c_record = audit_content->devail_code_count;
								c_amount = audit_content->amount_sum;
							}
							else if(strcmp(dealcode_type,"3")==0)
							{
								c_record = audit_content->record_count;
								c_amount = audit_content->amount_sum;
							}
							else if(strcmp(dealcode_type,"4")==0)
							{
								c_record = audit_content->recordf_count;
								c_amount = audit_content->amountf_sum;
							}
	#ifdef _DEBUG_INFO_
		printf("%s-%s\n",m_TableName,cfg->audit_name);
	#endif
							if (0 != insertMerge(m_TableName,audit_content->batchsn,audit_content->merge_type,audit_content->day_billcycl,audit_content->region_code,audit_id,c_record,c_amount))
							{
								iRet = RET_FAIL;
								delete audit_content;
								audit_content = NULL;
								break;
							}
							/*int count = 0;
							if (0 != selectMerge(m_TableName,audit_content->batchsn,audit_content->merge_type,audit_content->day_billcycl,audit_content->region_code,audit_id,&count))
							{
								iRet = RET_FAIL;
								break;
							}
							if (count == 0)
							{
								if (0 != insertMerge(m_TableName,audit_content->batchsn,audit_content->merge_type,audit_content->day_billcycl,audit_content->region_code,audit_id,c_record,c_amount))
								{
									iRet = RET_FAIL;
									break;
								}
							}
							else 
							{
								if (0 != updateMerge(m_TableName,audit_content->batchsn,audit_content->merge_type,audit_content->day_billcycl,audit_content->region_code,audit_id,c_record,c_amount))
								{
									iRet = RET_FAIL;
									break;
								}
							}*/
						}
					}
				}
				if (audit_contents.size()>0)
				{
					clearDataList(audit_contents);
				}
				if (iRet != 0)
				{
					m_Ibear->Rollback();
					file->Move(srcfilename,errfilename);
				}
				else
				{
					m_Ibear->Commit();
					file->Move(srcfilename,descfilename);
				}
			}

			if (m_FileList.size()>0)
				clearDataList(m_FileList);
			break;
		}
		default:
			break;
	}
	delete file;
	file=NULL;
	sleep(1);
	return iRet;
}

int RTOB_MERGERMgr::ProInterface(map<string,string> *values)
{
	int iRet = 0;
	return iRet;
}

int RTOB_MERGERMgr::UpdPoorStatus(stDealTask *pTask)
{
	int iRet = 0;
	return iRet;
}
