
/*
 * 功能描述:生成增量比对数据
 * 创建时间:
 * 编码人员:自动生成
*/

#include "inDataExpMgr.h"
#include "CDealData.h"

IMPLEMENT_CLASS(inDataExpMgr)

inDataExpMgr::inDataExpMgr()
{
	
}

inDataExpMgr::~inDataExpMgr()
{
	
}

int inDataExpMgr::init(ibear *br,stAppCfg_Proc_Server *pServerCfg, stAppCfg_System *pInfo, stAppCfg_ParseFile *pParseFile, STOP_COMMON_CONF *conf_info, char *processName,int processNum,int log_thread_num)
{
	int iRet = 0;
	int i = 0;
	m_Ibear = br;
	m_logFile = pServerCfg->logFile;
	map<string,stSqlMap*> sqlconfs = m_Ibear->m_Sqlconfs;
	for (map<string,stSqlMap*>::iterator it = sqlconfs.begin();it!=sqlconfs.end();it++)
	{
		string key_id = it->first;
		stSqlMap *map = it->second;
		if (strncmp(map->id,"BDS_",4) != 0)
		{
			printf("%s属于业务sql，不加载\n",map->id);
			continue;
		}
		table_names[i] = key_id;
		i++;
	}
	count = i;
	printf("加载的sql数量为:%d\n",i);
	
	return iRet;
}

int inDataExpMgr::getInterCount(const char *table_name,int *count)
{
	int iRet = 0;
	map<string,string> inParams;
	vector<string> v_row;
	inParams.insert(pair<string,string>("CHECK_TABLE",table_name));
	iRet = m_Ibear->queryForObject("GET_INTER_COUNT",inParams,&v_row);
	if (iRet != 0)
	{
		if (m_Ibear->error_code > 0)
		{
			exit(0);
		}
		m_logFile->WriteLog(LOG_FILE_LINE_ERROR,LOG_THREAD_MAIN,"GET_INTER_COUNT is ERROR,ERRNO[%s]ERRMSG[%s]",m_Ibear->no_error,m_Ibear->sql_error);
    iRet = RET_FAIL;
		return iRet;
	}	
	*count = atoi(v_row[0].c_str());
	return iRet;
}

int inDataExpMgr::getCompCount(const char *table_name,int *count)
{
	int iRet = 0;
	map<string,string> inParams;
	vector<string> v_row;
	inParams.insert(pair<string,string>("CHECK_TABLE",table_name));
	iRet = m_Ibear->queryForObject("GET_COMP_COUNT",inParams,&v_row);
	if (iRet != 0)
	{
		if (m_Ibear->error_code > 0)
		{
			exit(0);
		}
		m_logFile->WriteLog(LOG_FILE_LINE_ERROR,LOG_THREAD_MAIN,"GET_COMP_COUNT is ERROR,ERRNO[%s]ERRMSG[%s]",m_Ibear->no_error,m_Ibear->sql_error);
    iRet = RET_FAIL;
		return iRet;
	}	
	*count = atoi(v_row[0].c_str());
	return iRet;
}

int inDataExpMgr::getBDSData(const char *table_name)
{
	int iRet = 0;
	map<string,string> inParams;
	vector<vector<string> > list;
	iRet = m_Ibear->queryForList(table_name,inParams,&list);
	if (iRet != 0)
	{
		if (m_Ibear->error_code > 0)
		{
			exit(0);
		}
		m_logFile->WriteLog(LOG_FILE_LINE_ERROR,LOG_THREAD_MAIN,"%s is ERROR,ERRNO[%s]ERRMSG[%s]",table_name,m_Ibear->no_error,m_Ibear->sql_error);
    iRet = RET_FAIL;
		return iRet;
	}
	
	for (vector<vector<string> >::iterator it = list.begin();it!=list.end();it++)
	{
		vector<string> v_row = *it;
		char key[1024] = {0};
		for (int i = 0;i < v_row.size();i++)
		{
			if (i > 0)
			{
				sprintf(key,"%s$%s",key,v_row[i].c_str());
			}
			else 
			{
				strcpy(key ,v_row[0].c_str());
			}
		}
		vector<string>::iterator i_key = find( m_Keys.begin( ), m_Keys.end( ), string(key));
		if (i_key == m_Keys.end())
		{
			m_Keys.push_back(string(key));
		}
	}
	return iRet;
}

int inDataExpMgr::insertInterface(string key,string table_name)
{
	int iRet = 0;
	map<string,string> inParams;
	inParams.insert(pair<string,string>("KEY_VALUE",key));
	inParams.insert(pair<string,string>("CHECK_TABLE",table_name));
	iRet = m_Ibear->DML("INS_DATA",inParams);
	if (iRet != 0)
	{
		m_logFile->WriteLog(LOG_FILE_LINE_ERROR,LOG_THREAD_MAIN,"INS_DATA is ERROR,ERRNO[%s]ERRMSG[%s]",m_Ibear->no_error,m_Ibear->sql_error);
    iRet = RET_FAIL;
		return iRet;
	}
	return iRet;
}

int inDataExpMgr::insertCompareLog(string key_value,string table_name)
{
	int iRet = 0;
	map<string,string> inParams;
	inParams.insert(pair<string,string>("KEY_VALUE",key_value));
	inParams.insert(pair<string,string>("CHECK_TABLE",table_name));
	iRet = m_Ibear->DML("INS_COM",inParams);
	if (iRet != 0)
	{
		m_logFile->WriteLog(LOG_FILE_LINE_ERROR,LOG_THREAD_MAIN,"%s|INS_COM is ERROR,ERRMSG[%s]",m_Ibear->no_error,m_Ibear->sql_error);
    iRet = RET_FAIL;
	}
	return iRet;
}

int inDataExpMgr::process()
{
	int iRet = 0;
	
	for (int i=0;i<count;i++)
	{
		int table_count = 0;
		string table_name = table_names[i];
		printf("%s\n",table_name.c_str());
		iRet = getInterCount(table_name.c_str(),&table_count);
		if (iRet != 0)
		{
			return iRet;
		}
		if (table_count > 0 )
		{
			printf("%s仍有CHECK_DATA_INTERFACE未处理数据%d\n",table_name.c_str(),table_count);
			continue;
		}
		iRet = getCompCount(table_name.c_str(),&table_count);
		if (iRet != 0)
		{
			return iRet;
		}
		if (table_count > 0 )
		{
			printf("%s仍有CHECK_COMPARE_LOG未处理数据%d\n",table_name.c_str(),table_count);
			continue;
		}
		
		iRet = getBDSData(table_name.c_str());
		if (iRet != 0)
		{
			return iRet;
		}
		
		for (vector<string>::iterator it = m_Keys.begin();it != m_Keys.end();it++)
		{
			string key = *it;
			//iRet = insertInterface(key,table_name);
			iRet = insertCompareLog(key,table_name);
			if (iRet != 0)
			{
				m_Ibear->Rollback();
				break;
			}
			else 
			{
				m_Ibear->Commit();
			}
		}
		m_Keys.clear();
		
	}
	
	return iRet;
}

int inDataExpMgr::ProInterface(map<string,string> *values)
{
	int iRet = 0;
	return iRet;
}

int inDataExpMgr::UpdPoorStatus(stDealTask *pTask)
{
	int iRet = 0;
	return iRet;
}


