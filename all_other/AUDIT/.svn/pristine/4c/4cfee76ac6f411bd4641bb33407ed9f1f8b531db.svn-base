/**
 * describe:
 * create date:2013-10-28
 * author:wangzhia
 */
 
#include "rtStopPub.h"
#include "CLogFile.h"

CLogFile::CLogFile (void)
{
	m_LogType = 0;
	
	m_IntervalTime = 0;
	
	m_ProcMode = 0;
	
	m_BackUpType = 0;
	
	m_BackupSize = 0;
	
	m_File = NULL;
	
	m_MutexLocker = new CMutexLock();
	
	m_OTime = time(NULL);
	
	memset (m_CreateTime, 0, sizeof(m_CreateTime));
	
	getCurDateTime (m_CreateTime);
}

CLogFile::~CLogFile (void)
{
	if (NULL != m_File)
	{
		delete m_File;
		m_File = NULL;
	}
}

Ret CLogFile::InitLogFile (const string &sLogPath, const string &sLogName, UnInt32 nLogType, UnInt32 nInterval, UnInt32 nBackupSize, Int32 nProcMode, Int32 backupType)
{
	m_LogPath = sLogPath;
	
	m_StrLogName = sLogName;
	
	m_LogType = nLogType;
	
	m_IntervalTime = nInterval;
	
	m_BackupSize = nBackupSize;
	
	m_ProcMode = nProcMode;

	m_BackUpType = backupType;
	
	char szCurrTime[14+1] = {0};
	char tLogPath[1024] = {0};
	char tLogName[1024] = {0};
	
	sprintf (tLogPath, "%s/%s", m_LogPath.c_str(), STR_PATH_TEMP);
	
	if (m_BackUpType == LOG_BACKUP_DATE)
	{
		char tCurTime[14+1] = {0};
		getCurDateTime (tCurTime);
		strncpy (szCurrTime, tCurTime, 8);
		szCurrTime[8] = '\0';
	}
	else if (m_BackUpType == LOG_BACKUP_HOUR)
	{
		char tCurTime[14+1] = {0};
		getCurDateTime (tCurTime);
		strncpy (szCurrTime, tCurTime, 10);
		szCurrTime[10] = '\0';
	}
	else
	{
		getCurDateTime (szCurrTime);
	}

	switch (m_LogType)
	{
		case LOG_SYS_NORMAL:
			sprintf (tLogName, "%s_%s_%s.%s", m_StrLogName.c_str(), STR_LOG_SYS_NORMAL, szCurrTime, FILE_EXTEN_NAME);
			break;
		case LOG_SYS_RUNNING:
			sprintf (tLogName, "%s_%s_%s.%s", m_StrLogName.c_str(), STR_LOG_SYS_RUNNING, szCurrTime, FILE_EXTEN_NAME);
			break;
		case LOG_SYS_WARNING:
			sprintf (tLogName, "%s_%s_%s.%s", m_StrLogName.c_str(), STR_LOG_SYS_WARNING, szCurrTime, FILE_EXTEN_NAME);
			break;
		case LOG_SYS_ERROR:
			sprintf (tLogName, "%s_%s_%s.%s", m_StrLogName.c_str(), STR_LOG_SYS_ERROR, szCurrTime, FILE_EXTEN_NAME);
			break;
		case LOG_APP_STATINFO:
			sprintf (tLogName, "%s_%s_%s.%s", m_StrLogName.c_str(), STR_LOG_APP_STATINFO, szCurrTime, FILE_EXTEN_NAME);
			break;
		case LOG_APP_PERFORMANCE:
			sprintf (tLogName, "%s_%s_%s.%s", m_StrLogName.c_str(), STR_LOG_APP_PERFORMANCE, szCurrTime, FILE_EXTEN_NAME);
			break;
		default:
			break;
	}
	m_File = new GDF_FILE (tLogPath, tLogName);
	
	if (0 != m_File->Open ("a+"))
	{
		printf ("FILE[%s]LINE[%d]ERR_MSG[Open File Is Failed.]\n", __FILE__, __LINE__);
			
		return RET_FAIL;
	}
	
	if (SERVER_ASYNC_MODE == m_ProcMode)
	{
		this->m_LogQueue.setMaxNum(MAX_DEQUE_NUM);
		
		this->start();
	}
	
	return RET_OK;
}

void CLogFile::WriteLog (UnInt32 nLevel, const char *fmt, ...)
{
	char szDescription[1024+1] = {0};
	char buffer[1088+1] = {0};
	
	va_list args;
	
  	va_start(args, fmt);

	vsnprintf (szDescription, 1024, fmt, args);
	va_end (args);
	
	if (m_LogType == LOG_APP_STATINFO ||
		m_LogType == LOG_APP_PERFORMANCE ||
		m_LogType == LOG_SYS_RUNNING)
	{
		strcpy(buffer, szDescription);
	}
	else
	{
		char szTime[25];
		memset(szTime, 0, sizeof(szTime));
		getSysDatetoStr(szTime);
		sprintf(buffer,"[%s] [level:%d] %s", szTime, nLevel, szDescription);
	}
	
#ifdef _DEBUG_INFO_
    printf("%s",buffer);
#endif

  	DoLog (buffer);
}

void CLogFile::DoLog (const char *sBuf)
{
	if (m_ProcMode == SERVER_SYNC_MODE)
	{
		m_File->Write (sBuf, strlen(sBuf), 1);

		m_File->Fflush();
	}
	else if (m_ProcMode == SERVER_ASYNC_MODE)
	{
		stLogInfo *pNode = new stLogInfo();//(stLogInfo *)malloc(sizeof(stLogInfo));
		if (pNode != NULL)
		{
			strcpy (pNode->buff, sBuf);
			pNode->size = strlen (pNode->buff);
			m_LogQueue.push_first (pNode);
		}
	}
}

void CLogFile::run (void)
{
	stLogInfo *pStr = NULL;
	while (getThreadState() == THREAD_STAT_RUNNING)
	{
		pStr = m_LogQueue.pop();
		
		if (NULL == pStr)
		{
			usleep (20);
			continue;
		}
		
		m_File->Write (pStr->buff, pStr->size, 1);
		
		m_File->Fflush();
		
		delete pStr;
		pStr = NULL;
	}
}

Ret CLogFile::BackupLog (void)
{
	struct stat buf;

	if (!this->IsBackup())
	{
		return RET_OK;
	}
	
	char backupPath[1024] = {0};
	char backupName[1024] = {0};
	char backupFile[1024] = {0};
	char sourPath[1024] = {0};
	char szCurrTime[14+1] = {0};
	
	memset (backupPath, 0, sizeof(backupPath));
	memset (backupName, 0, sizeof(backupName));
	memset (backupFile, 0, sizeof(backupFile));
	memset (sourPath, 0, sizeof(sourPath));
	memset (szCurrTime, 0, sizeof(szCurrTime));
	
	if (m_BackUpType == LOG_BACKUP_DATE)
	{
		char tCurTime[14+1] = {0};
		getCurDateTime (tCurTime);
		strncpy (szCurrTime, tCurTime, 8);
		szCurrTime[8] = '\0';
	}
	else if (m_BackUpType == LOG_BACKUP_HOUR)
	{
		char tCurTime[14+1] = {0};
		getCurDateTime (tCurTime);
		strncpy (szCurrTime, tCurTime, 10);
		szCurrTime[10] = '\0';
	}
	else
	{
		getCurDateTime (szCurrTime);
	}
	
	sprintf (backupPath, "%s/%s", m_LogPath.c_str(), STR_PATH_RUNLOG);
	sprintf (sourPath, "%s/%s", m_LogPath.c_str(), STR_PATH_TEMP);

	switch (m_LogType)
	{
		case LOG_SYS_NORMAL:
			sprintf (backupName, "%s_%s_%s.%s", m_StrLogName.c_str(), STR_LOG_SYS_NORMAL, szCurrTime, FILE_EXTEN_NAME);
			break;
		case LOG_SYS_RUNNING:
			sprintf (backupName, "%s_%s_%s.%s", m_StrLogName.c_str(), STR_LOG_SYS_RUNNING, szCurrTime, FILE_EXTEN_NAME);
			break;
		case LOG_SYS_WARNING:
			sprintf (backupName, "%s_%s_%s.%s", m_StrLogName.c_str(), STR_LOG_SYS_WARNING, szCurrTime, FILE_EXTEN_NAME);
			break;
		case LOG_SYS_ERROR:
			sprintf (backupName, "%s_%s_%s.%s", m_StrLogName.c_str(), STR_LOG_SYS_ERROR, szCurrTime, FILE_EXTEN_NAME);
			break;
		case LOG_APP_STATINFO:
			sprintf (backupName, "%s_%s_%s.%s", m_StrLogName.c_str(), STR_LOG_APP_STATINFO, szCurrTime, FILE_EXTEN_NAME);
			break;
		case LOG_APP_PERFORMANCE:
			sprintf (backupName, "%s_%s_%s.%s", m_StrLogName.c_str(), STR_LOG_APP_PERFORMANCE, szCurrTime, FILE_EXTEN_NAME);
			break;
		default:
			break;
	}
	
	sprintf (backupFile, "%s/%s", backupPath, m_File->GetFileName());
	
#ifdef _DEBUG_INFO_
	printf ("backupFile = %s\n", backupFile);
#endif
	
	GDF_FILE *pTemp = new GDF_FILE (sourPath, backupName);
	
	if (0 != pTemp->Open ("a+"))
	{
		printf ("FILE[%s]LINE[%d]ERR_MSG[Open File Is Failed.]\n", __FILE__, __LINE__);
			
		return RET_FAIL;
	}
	
	GDF_FILE *pSourFile = m_File;

	m_MutexLocker->Lock();

	m_File = pTemp;

	m_MutexLocker->UnLock();
	
	pSourFile->Rename (backupFile);
	
	pSourFile->Close ();
	
	pSourFile->Remove ();
	
	if (NULL != pSourFile)
	{
		delete pSourFile;
		
		pSourFile = NULL;
	}
	
	return RET_OK;
}

bool CLogFile::IsBackup (void)
{
	switch (m_BackUpType)
	{
		case LOG_BACKUP_DATE:
		{
			char tCurTime[14+1] = {0};
			getCurDateTime (tCurTime);
			
			if (strncmp(tCurTime, m_CreateTime, 8) != 0)
			{
				strcpy (m_CreateTime, tCurTime);
				
				return true;
			}
			
			break;
		}
		case LOG_BACKUP_SIZE:
		{
			struct stat buf;
	
			stat (m_File->GetFullFileName(), &buf);
			
			if (buf.st_size > (m_BackupSize/1024/1024))
			{
				return true;
			}
			
			break;
		}
		case LOG_BACKUP_INTERVAL_TIME:
		{
			time_t tmpT = time(NULL);

			if (tmpT/m_IntervalTime != m_OTime/m_IntervalTime)
			{
				m_OTime = time (NULL);
				
				return true;
			}
			
			break;
		}
		case LOG_BACKUP_HOUR:
		{
			char tCurTime[14+1] = {0};
			getCurDateTime (tCurTime);
			
			if (strncmp(tCurTime, m_CreateTime, 10) != 0)
			{
				strcpy (m_CreateTime, tCurTime);
				
				return true;
			}
			
			break;
		}
		default:
		{
			printf ("FILE[%s]LINE[%d]ERR_MSG[m_BackUpType<%d> Is Failed.]\n", __FILE__, __LINE__, m_BackUpType);
			
			break;
		}
	}
	
	return false;
}

CLogServer::CLogServer (void)
{
	m_nCount = 0;
}

CLogServer::~CLogServer (void)
{
	if (m_MapLogFile.size() != 0)
	{
		this->Close();
	}
}

void CLogServer::SetLogInfo (const char *sLogPath, const char *sLogName)
{
	m_LogPath = string (sLogPath);
	
	m_StrLogName = string (sLogName);
}

Ret CLogServer::Backup ()
{	
	for (mapLogFile::iterator iter = m_MapLogFile.begin(); iter != m_MapLogFile.end(); iter++)
	{
		CLogFile *pNode = (iter->second);
		
		pNode->BackupLog();
	}
	
	return RET_OK;
}

Ret CLogServer::AddLogFile (UnInt32 nLogType, UnInt32 nInterval, UnInt32 nBackupSize, Int32 nProcMode, Int32 backupType)
{
	mapLogFile::iterator iter = m_MapLogFile.find(nLogType);
	
	if (iter != m_MapLogFile.end())
	{
		return RET_OK;
	}
	
	CLogFile *pNode = new CLogFile ();

	if (0 != pNode->InitLogFile (m_LogPath, m_StrLogName, nLogType, nInterval, nBackupSize, nProcMode, backupType))
	{
		printf ("FILE[%s]LINE[%d]ERR_MSG[File Pointer Is NULL.]\n", __FILE__, __LINE__);
		return RET_FAIL;
	}
	
	m_MapLogFile.insert (pair<UnInt32, CLogFile *>(nLogType, pNode));
	m_nCount++;
	
	return RET_OK;
}

Ret CLogServer::DelLogFile (UnInt32 nLogType)
{
	mapLogFile::iterator iter = m_MapLogFile.find(nLogType);
	
	if (iter != m_MapLogFile.end())
	{
		delete (iter->second);
		
		m_MapLogFile.erase(iter);
	}
	
	return RET_OK;
}

void CLogServer::Close (void)
{	
	for (mapLogFile::iterator iter = m_MapLogFile.begin(); iter != m_MapLogFile.end(); iter++)
	{
		delete (iter->second);
	}
	
	m_MapLogFile.clear();
}

CLogFile *CLogServer::GetLogFile (UnInt32 nLogType)
{
	mapLogFile::iterator iter = m_MapLogFile.find(nLogType);
		
	if (iter != m_MapLogFile.end())
	{
		return (iter->second);
	}

	return NULL;
}
