
/*
 * 功能描述:
 * 创建时间:
 * 编码人员:自动生成
*/

#include "RTOBMgr.h"
#include "CDealData.h"

IMPLEMENT_CLASS(RTOBMgr)

RTOBMgr::RTOBMgr()
{
	
}

RTOBMgr::~RTOBMgr()
{
	
}

int RTOBMgr::init(ibear *br,stAppCfg_Proc_Server *pServerCfg, stAppCfg_System *pInfo, stAppCfg_ParseFile *pParseFile, STOP_COMMON_CONF *conf_info, char *processName,int processNum,int log_thread_num)
{
	memset(&m_szInData, 0, sizeof(m_szInData));
	sprintf(m_szInData.busi_type,"%s","0");    /*子服务标识 没有的话统一填0*/
	m_szInData.thread_id = 0;
	int iRet = 0;
	char app_pid[10+1] = {0};
	m_CfgInfo = pServerCfg;
	m_ProInfo = pInfo;
	m_logFile = m_CfgInfo->logFile;
	m_logMon = m_CfgInfo->logMon;
	m_Ibear = br;
	m_ServerExitFlag = false;
	memset(m_TableName,0,sizeof(m_TableName));
	sprintf(app_pid,"%d",getpid());
	iRet = appStart(br,m_ProInfo->ipAddress,m_ProInfo->program_name,m_ProInfo->procUnikey,app_pid);
	if (iRet != 0)
	{
  	printf("进程不允许启动[%s] \n",getErrInfo());
		//m_logFile->WriteLog(LOG_FILE_LINE_ERROR,LOG_THREAD_MAIN,"appStart失败[%d][%s,%s,%s,%s]!!!\n",iRet,pInfo->ipAddress,pInfo->procUnikey,pInfo->program_name,app_pid);
  	//m_logFile->WriteLog(LOG_FILE_LINE_ERROR,LOG_THREAD_MAIN,"进程不允许启动[%s]",getErrInfo());
  	return -1;
	}
	
	//解析zk返回值，获得表名
	if(0 != SplitString(m_TableName,processName,',',2))
	{
		strcpy(m_TableName,processName);
	}
	if(0 != SplitString(m_TableName,m_TableName,'=',2))
	{
		strcpy(m_TableName,processName);
	}
	
	m_logFile->WriteLog(LOG_FILE_LINE_INFO,LOG_THREAD_MAIN,"临时目录%s",m_CfgInfo->bak_cfg_info.tmpdir);
	m_logFile->WriteLog(LOG_FILE_LINE_INFO,LOG_THREAD_MAIN,"备份目录%s",m_CfgInfo->bak_cfg_info.bakdir);
	
	if (access(m_CfgInfo->bak_cfg_info.tmpdir,NULL) !=0)
	{
	#ifdef _DEBUG_INFO_
		printf("临时目录%s不存在，程序进行创建\n",m_CfgInfo->bak_cfg_info.tmpdir);
	#endif
		if (mkdir(m_CfgInfo->bak_cfg_info.tmpdir,0755) == -1)
		{
			m_logFile->WriteLog(LOG_FILE_LINE_ERROR,LOG_THREAD_MAIN,"%s|临时目录%s创建失败!!!\n",SYSTEM_PATH_OPEN_ERROR,m_CfgInfo->bak_cfg_info.tmpdir);
			return -1;
		}
	}
	
	//判断tmpdir下是否有文件
	if (0 != dealTempFile())
	{
		m_Ibear->Rollback();
		return RET_FAIL;
	}
	
	return iRet;
}

int RTOBMgr::getOrderList(char *table_name)
{
	int iRet = RET_OK;
	char end[5+1] = {0};
	map<string,string> inParams;
	vector<vector<string> > list;
	char wsseq[25] = {0};
	char notes[1024] = {0};
	inParams.insert(pair<string,string>(string("TABLE_NAME"),string(table_name)));
	iRet = m_Ibear->queryForList("SEL_MD_HIS",inParams,&list);
	if (iRet != 0)
	{
		if (m_Ibear->error_code > 0)
		{
			exit(0);
		}
		m_logFile->WriteLog(LOG_FILE_LINE_ERROR,LOG_THREAD_MAIN,"%s|SEL_MD_HIS:%s is ERROR,ERRMSG:%s ",m_Ibear->no_error,table_name,m_Ibear->sql_error);
    iRet = RET_FAIL;
		return iRet;
	}

	for (vector<vector<string> >::iterator it = list.begin();it!=list.end();it++)
	{
		vector<string> v_row = *it;
#ifdef _DEBUG_INFO_
	printf("%s@%s@%s@%s@%s@%s@%s@%s@%s@%s@%s@%s@\n",v_row[0].c_str(),v_row[1].c_str(),v_row[2].c_str(),v_row[3].c_str(),v_row[4].c_str(),v_row[5].c_str(),v_row[6].c_str(),v_row[7].c_str(),v_row[8].c_str(),v_row[9].c_str(),v_row[10].c_str(),v_row[11].c_str());
#endif	
		stOrder *order = new stOrder();
		strcpy(order->batchsn,v_row[0].c_str());
		strcpy(order->wsseq,v_row[1].c_str());
		strcpy(order->id_no,v_row[4].c_str());
		sprintf(order->notes,"%s@%s@%s@%s@%s@%s@%s@%s@%s@%s@%s@%s@",v_row[0].c_str(),v_row[1].c_str(),v_row[2].c_str(),v_row[3].c_str(),v_row[4].c_str()
						,v_row[5].c_str(),v_row[6].c_str(),v_row[7].c_str(),v_row[8].c_str(),v_row[9].c_str(),v_row[10].c_str(),v_row[11].c_str());
		map<string,vector<stOrder*> >::iterator it = m_interfaceTable.find(order->batchsn);
		if (it != m_interfaceTable.end())
		{
			(it->second).push_back(order);
		}
		else
		{
			vector<stOrder*> notes;
			notes.push_back(order);
			m_interfaceTable.insert(pair<string,vector<stOrder*> >(order->batchsn,notes));
		}
	}
  return iRet;
}

int RTOBMgr::getOrderCount(char *table_name,int *count)
{
	int iRet = RET_OK;
	map<string,string> inParams;
	vector<string> v_row;
	inParams.insert(pair<string,string>(string("TABLE_NAME"),string(table_name)));
	iRet = m_Ibear->queryForObject("COUNT_MD_HIS",inParams,&v_row);
	if (iRet != 0)
	{
		if (m_Ibear->error_code > 0)
		{
			exit(0);
		}
		m_logFile->WriteLog(LOG_FILE_LINE_ERROR,LOG_THREAD_MAIN,"%s|COUNT_MD_HIS:%s is ERROR,ERRMSG:%s ",m_Ibear->no_error,table_name,m_Ibear->sql_error);
    iRet = RET_FAIL;
		return iRet;
	}
	
	*count = atoi(v_row[0].c_str());

  return iRet;
}

int RTOBMgr::deleteOrderByWs(char *table_name,char *batchsn,char *wsseq,char *id_no)
{
	int iRet = RET_OK;
	char end[5+1] = {0};
	map<string,string> inParams;
	inParams.insert(pair<string,string>(string("TABLE_NAME"),string(table_name)));
	inParams.insert(pair<string,string>(string("BATCHSN"),string(batchsn)));
	inParams.insert(pair<string,string>(string("ID_NO"),string(id_no)));
	inParams.insert(pair<string,string>(string("WSSEQ"),string(wsseq)));
	iRet = m_Ibear->DML("DEL_MD_HIS",inParams);
	if (iRet != 0 && iRet != 1)
	{
		if (m_Ibear->error_code > 0)
		{
			exit(0);
		}
		m_logFile->WriteLog(LOG_FILE_LINE_ERROR,LOG_THREAD_MAIN,"%s|UPD_MD_HIS:%s is ERROR,ERRMSG:%s ",m_Ibear->no_error,table_name,m_Ibear->sql_error);
    iRet = RET_FAIL;
		return iRet;
	}
  return RET_OK;
}

/*
 * 检查tmp临时目录，若有临时文件，进行后续处理
**/
int RTOBMgr::dealTempFile()
{
	char srcfilename[1024] = {0};
	char descfilename[1024] = {0};
	char sysdate[18+1] = {0};
	char bakName[1024] = {0};
	getCurDateTime(sysdate,"hhmiss");
#ifdef _SDFS_DEAL_FILE_
	SDFS_GDF_FILE *file = new SDFS_GDF_FILE();
#else
	GDF_FILE *file = new GDF_FILE();
#endif
	if (0 != file->getFileList(m_CfgInfo->bak_cfg_info.tmpdir))
	{
		m_logFile->WriteLog(LOG_FILE_LINE_ERROR,LOG_THREAD_MAIN,"%s|getFileList %s error",SYSTEM_PATH_OPEN_ERROR,m_CfgInfo->bak_cfg_info.tmpdir);
		return RET_FAIL;
	}
	vector<stFileInfo*> m_FileList = file->mFileList;
	//若没有，走正常流程
	//若有文件，检查结尾是否有结束符
		//若有，delete，mv
		//若无，rm write delete mv
	for (vector<stFileInfo*>::iterator it = m_FileList.begin();it<m_FileList.end();it++)
	{
		stFileInfo *f = *it;
		char strBuff[4096] = {0};
		sprintf(srcfilename,"%s/%s",m_CfgInfo->bak_cfg_info.tmpdir,f->sFileName);
#ifdef _SDFS_DEAL_FILE_
		SDFS data_file;
		SFILE *pFile = sopen(srcfilename,"r",data_file);
		while(sgets (strBuff, 4096, pFile) != NULL)
		{
		}
		strcpy(strBuff,delN(strBuff));
	#ifdef _DEBUG_INFO_
		printf("%s %d",strBuff,strlen(strBuff));
	#endif
		if (strcmp(strBuff,DEF_FILE_END_FLAG) == 0)
		{
			//mv文件到bak目录下
			sprintf(bakName,"%s.%s",f->sFileName, sysdate);
			sprintf(descfilename,"%s/%s",m_CfgInfo->bak_cfg_info.bakdir,bakName);
		#ifdef _DEBUG_INFO_
			printf("srcfilename:%s\ndesc:%s\n",srcfilename,descfilename);
		#endif	
			if (0 != sclose (pFile))
			{
				sdestory( &data_file);
				return RET_FAIL;
			}
			pFile = NULL;
		}
		else 
		{
			if (0 != sremove (srcfilename,&data_file))
			{
				sdestory( &data_file );
				return RET_FAIL;
			}
			m_logFile->WriteLog(LOG_FILE_LINE_INFO,LOG_THREAD_MAIN,"[%s]没有结束符，直接删除",srcfilename);
			return RET_OK;
		}
#else
		FILE *pFile = fopen(srcfilename,"r");
		while(fgets (strBuff, 4096, pFile) != NULL)
		{
		}
		
		if (strcmp(strBuff,DEF_FILE_END_FLAG) != 0)
		{
			remove (srcfilename);
			m_logFile->WriteLog(LOG_FILE_LINE_INFO,LOG_THREAD_MAIN,"[%s]没有结束符，直接删除",srcfilename);
			return RET_OK;
		}

		fseek(pFile,0L,SEEK_SET);
		while(fgets (strBuff, 4096, pFile) != NULL)
		{
			strcpy(strBuff,delN(strBuff));
			if (strcmp(strBuff,DEF_FILE_END_FLAG) == 0)
			{
				break;
			}
			else 
			{
				string order[12];
				SplitString(strBuff,'@',order);
				char batchsn[100] = {0};
				char wsseq[100] = {0};
				char id_no[20] = {0};
				strcpy(batchsn,order[0].c_str());
				strcpy(wsseq,order[1].c_str());
				strcpy(id_no,order[4].c_str());
				if (0 != deleteOrderByWs(m_TableName,batchsn,wsseq,id_no))
				{
					return RET_FAIL;
				}
			}
		}
		//mv文件到bak目录下
		sprintf(bakName,"%s.%s",f->sFileName, sysdate);
		sprintf(descfilename,"%s/%s",m_CfgInfo->bak_cfg_info.bakdir,bakName);
		
		m_logFile->WriteLog(LOG_FILE_LINE_INFO,LOG_THREAD_MAIN,"srcfilename:%s\ndesc:%s",srcfilename,descfilename);

		if (0 != fclose (pFile))
		{
			return RET_FAIL;
		}
		pFile = NULL;
#endif
		move_file(srcfilename,descfilename);
		if (m_Ibear->Commit() != 0)
		{
			m_Ibear->Rollback();
	 	 	return RET_FAIL;
		}
	}
	return RET_OK;
}

int RTOBMgr::process()
{
	if (0 == isAppStop(m_ProInfo->ipAddress,m_ProInfo->program_name))
	{
		//可以停止
		if (0 == appStop(m_ProInfo->ipAddress,m_ProInfo->program_name))
		{
	  	printf("进程停止[%s %s]\n",m_ProInfo->ipAddress,m_ProInfo->program_name);
			//m_logFile->WriteLog(LOG_FILE_LINE_ERROR,LOG_THREAD_MAIN,"进程停止[%s %s]\n",m_ProInfo->ipAddress,m_ProInfo->program_name);

			exit(0);
		}
	}
	int iRet = 0;
	int count = 0;
	iRet = getOrderCount(m_TableName,&count);
	if (0 != iRet)
	{
    exit(0);
	}

	//数据不足50w，sleep 5分钟后再做处理
	if (count<500000)
	{
		sleep(300);
	}
	
#ifdef _SDFS_DEAL_FILE_
SDFS_GDF_FILE *pFile = NULL;
#else
GDF_FILE *pFile = NULL;
#endif

	iRet = getOrderList(m_TableName);
	if (0 != iRet)
	{
    exit(0);
	}
	if (m_interfaceTable.size() == 0)
	{
		//查询接口数据为空
		sleep(1);
		return RET_OK;
	}
	
	for (map<string,vector<stOrder*> >::iterator ater = m_interfaceTable.begin(); ater != m_interfaceTable.end(); ater++)
	{
		long t1 = 0,t2 = 0;
		m_szInData.record_count = 0;
		t1 = getUTime();
		vector<stOrder*> orders = ater->second;
		string batchsn_s = ater->first;
		char batchsn[64] = {0};
		char sysdate[18+1] = {0};
		char tmpFile[1024] = {0};
		char tmpStr[4096] = {0};
		char tmpName[1024] = {0};
		char bakName[1024] = {0};
		
		getCurDateTime(sysdate,"hhmiss");
		strcpy(batchsn,batchsn_s.c_str());
		strcpy (tmpFile, batchsn);
		
		//初始化文件系统
	#ifdef _SDFS_DEAL_FILE_
		pFile = new SDFS_GDF_FILE (m_CfgInfo->bak_cfg_info.tmpdir, tmpFile);
		if (0 != pFile->Open ("a+"))
		{
			m_logFile->WriteLog(LOG_FILE_LINE_ERROR,LOG_THREAD_MAIN,"%s|Open File %s%s Is Failed.",SYSTEM_FILE_OPEN_ERROR,m_CfgInfo->bak_cfg_info.tmpdir,tmpFile);
	    exit(0);
		}
	#else
		pFile = new GDF_FILE (m_CfgInfo->bak_cfg_info.tmpdir, tmpFile);
		if (0 != pFile->Open ("a+"))
		{
			m_logFile->WriteLog(LOG_FILE_LINE_ERROR,LOG_THREAD_MAIN,"%s|Open File %s%s Is Failed.",SYSTEM_FILE_OPEN_ERROR,m_CfgInfo->bak_cfg_info.tmpdir,tmpFile);
	    exit(0);
		}
	#endif
		m_logFile->WriteLog(LOG_FILE_LINE_INFO,LOG_THREAD_MAIN,"批次号：%s",batchsn);
		for (vector<stOrder*>::iterator iter = orders.begin(); iter != orders.end(); iter++)
		{
			stOrder *order = *iter;
			memset(tmpStr,0,sizeof(tmpStr));
			if (0 != deleteOrderByWs(m_TableName,batchsn,order->wsseq,order->id_no))
			{
				m_Ibear->Rollback();
				pFile->Close();
				return RET_FAIL;
			}
			sprintf(tmpStr,"%s\r\n",order->notes);
			pFile->Write (tmpStr, strlen(tmpStr), 1);
			m_szInData.record_count ++;
		}
		
		//写入文件结尾
		memset(tmpStr,0,sizeof(tmpStr));
		strcpy(tmpStr,DEF_FILE_END_FLAG);
		pFile->Write (tmpStr, strlen(tmpStr), 1);
		//flush文件
		pFile->Fflush();
		//commit
		if (m_Ibear->Commit() != 0)
		{
			m_Ibear->Rollback();
			pFile->Close();
   	 	exit(0);
		}
		//mv文件到备份目录
		sprintf(tmpName,"%s/%s",m_CfgInfo->bak_cfg_info.tmpdir, tmpFile);
		sprintf(bakName,"%s/%s.%s.%d",m_CfgInfo->bak_cfg_info.bakdir, tmpFile, sysdate, random(1000));
	#ifdef _DEBUG_INFO_
		printf("%s,bakName=%s\n",sysdate,bakName);
	#endif
		m_logFile->WriteLog(LOG_FILE_LINE_INFO,LOG_THREAD_MAIN,"备份文件为:%s",bakName);
		pFile->Move(tmpName,bakName);
		pFile->Close();
		t2 = getUTime();
		m_szInData.time_cost = (t2-t1)/1000.000;
		m_logMon->pushMonitorBaseInfo(m_szInData);
	}
	//清除集合
	if (m_interfaceTable.size() > 0)
	{
		clearDataList(m_interfaceTable);
	}
	
	return iRet;
}

int RTOBMgr::ProInterface(map<string,string> *values)
{
	int iRet = 0;
	return iRet;
}

int RTOBMgr::UpdPoorStatus(stDealTask *pTask)
{
	int iRet = 0;
	return iRet;
}

int RTOBMgr::selectcountOrderByWs(char *table_name,char *batchsn,char *wsseq,char *id_no,int *count)
{
	int iRet = RET_OK;
	char end[5+1] = {0};
	map<string,string> inParams;
	vector<string> v_row;
	inParams.insert(pair<string,string>(string("TABLE_NAME"),string(table_name)));
	inParams.insert(pair<string,string>(string("BATCHSN"),string(batchsn)));
	inParams.insert(pair<string,string>(string("ID_NO"),string(id_no)));
	inParams.insert(pair<string,string>(string("WSSEQ"),string(wsseq)));
	iRet = m_Ibear->queryForObject("SEL_MD_HIS_TE",inParams,&v_row);
	if (iRet != 0)
	{
		if (m_Ibear->error_code > 0)
		{
			exit(0);
		}
		m_logFile->WriteLog(LOG_FILE_LINE_ERROR,LOG_THREAD_MAIN,"%s|SEL_MD_HIS_TE:%s is ERROR %s",m_Ibear->no_error,table_name,m_Ibear->sql_error);
    iRet = RET_FAIL;
		return iRet;
	}
	if (v_row.size()>0)
	{
		*count = atoi(v_row[0].c_str());
	}
	else 
	{
		iRet = RET_FAIL;
	}
  return RET_OK;
}
