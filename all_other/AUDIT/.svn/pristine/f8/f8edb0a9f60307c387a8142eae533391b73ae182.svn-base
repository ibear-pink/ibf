/**
 * describe:文件接口函数
 * create date:2013-10-28
 * author wangzhia
 */
 
#include <string.h>
#include "FILE.h"

GDF_FILE::GDF_FILE (void)
{
	memset (m_FileName, 0, sizeof(m_FileName));
	
	memset (m_FilePath, 0, sizeof(m_FilePath));
	
	memset (m_FullFileName, 0, sizeof(m_FullFileName));
	
	m_Fp = NULL;
}

GDF_FILE::GDF_FILE (const char *szFilePath, const char *szFileName)
{	
	m_Fp = NULL;

	strcpy (m_FileName, szFileName);
	
	strcpy (m_FilePath, szFilePath);
	
	strcpy (m_FullFileName, m_FilePath);

	int DirLen = strlen(m_FilePath);
	
	if (m_FilePath[DirLen - 1] == '/')
	{
		strcpy (m_FullFileName + DirLen, m_FileName);
	}
	else
	{
		m_FullFileName[DirLen] = '/';
		strcpy (m_FullFileName + DirLen + 1, m_FileName);
	}
	
	m_StartTime = time(NULL);
}

GDF_FILE::~GDF_FILE (void)
{
	if (NULL != m_Fp)
	{
		this->Close ();
	}
}

Ret GDF_FILE::Open (const char *szMode)
{
#ifdef _DEBUG_INFO_
	printf ("m_FullFileName = %s\n", m_FullFileName);
#endif
	m_Fp = fopen (m_FullFileName, szMode);
	
	if (NULL == m_Fp)
	{
		printf ("FILE[%s]LINE[%d]ERR_MSG[File Pointer Is Null.]\n", __FILE__, __LINE__);
		return RET_FAIL;
	}
	
	return RET_OK;
}

size_t GDF_FILE::Write (const char *buffer, size_t size, size_t count)
{
	if (this->m_Fp)
		return fwrite (buffer, size, count, this->m_Fp);
	else
		return 0;
}

Ret GDF_FILE::getFileList(char *indir)
{
	DIR* dir;
	dirent* ptr;
	char fullFileName[1024] = {0};
	stFileInfo *pNode = NULL;
	struct stat stStatBuf;
	
	dir = opendir(indir);
	while ((ptr = readdir(dir)) != NULL)
	{
		memset (fullFileName, 0, sizeof(fullFileName));
		//指定入口文件目录
		sprintf(fullFileName, "%s/%s", indir, ptr->d_name);
		if (stat(fullFileName, &stStatBuf) == -1)
		{
			continue;
		}
		if(S_ISDIR(stStatBuf.st_mode))
		{
			if (strcmp(ptr->d_name, ".") == 0 || strcmp(ptr->d_name, "..") == 0)
			{
				continue;
			}
		}
		if(S_ISREG(stStatBuf.st_mode))
		{
			pNode = new stFileInfo;
			if (NULL == pNode)
			{
				printf("[%s][%d]new stFileInfo is failed.\n",__FILE__,__LINE__, ptr->d_name);
				continue;
			}
			
			memset (pNode, 0, sizeof(stFileInfo));
			
			strcpy (pNode->sFileName, ptr->d_name);
			
			struct tm tDateTime;
			
			time_t lSeconds;
			time( &lSeconds );
			localtime_r( &lSeconds, &tDateTime );
			
			sprintf (pNode->sModifyTime, "%04d%02d%02d%02d%02d%02d", tDateTime.tm_year + 1900, tDateTime.tm_mon + 1, tDateTime.tm_mday,tDateTime.tm_hour, tDateTime.tm_min, tDateTime.tm_sec);
			
#ifdef _DEBUG_INFO_
	printf ("file_name|%s|modify_time|%s\n", pNode->sFileName, pNode->sModifyTime);
#endif
			mFileList.push_back (pNode);
		}
	}
	closedir(dir);
	
	return RET_OK;
}

Ret GDF_FILE::Close (void)
{
	if ((this->mFileList).size()>0)
	{
		for(vector<stFileInfo *>::iterator it = (this->mFileList).begin();it!=(this->mFileList).end();it++)
		{
			stFileInfo *file = *it;
			delete file;
			file = NULL;
		}
		(this->mFileList).clear();
	}
	if (0 != fclose (m_Fp))
	{
		return RET_FAIL;
	}
	
	m_Fp = NULL;
	
	return RET_OK;
}

Ret GDF_FILE::Rename (const char *destFile)
{	
	struct stat buf;
	stat (m_FullFileName, &buf);
	if (buf.st_size > 0)
	{
		if (0 != rename (m_FullFileName, destFile))
		{
			return RET_FAIL;
		}
	}	
	
	return RET_OK;
}

void GDF_FILE::MakeFullName (char *szFullName)
{
	strcpy (szFullName, m_FilePath);

	int DirLen = strlen(m_FilePath);
	
	if (m_FilePath[DirLen - 1] == '/')
	{
		strcpy (szFullName + DirLen, m_FileName);
	}
	else
	{
		szFullName[DirLen] = '/';
		strcpy (szFullName + DirLen + 1, m_FileName);
	}
}

Ret GDF_FILE::Remove (void)
{	
	if (0 != remove (m_FullFileName))
	{
		return RET_FAIL;
	}
	
	return RET_OK;
}

Int32 GDF_FILE::Fflush (void)
{
	if (this->m_Fp)
	{
		return fflush (this->m_Fp);
	}
	else
	{
		return 0;
	}
}

bool GDF_FILE::IsFileExist ()
{	
	struct stat statMode;

	if ((lstat(m_FullFileName, &statMode) == 0))
	{
		return false;
	}

	if (access(m_FullFileName, R_OK|W_OK) < 0)
	{
		return false;
	}

	return true;
}

bool GDF_FILE::IsFilePointerNull (void)
{
	if (NULL == m_Fp)
	{
		return false;
	}
	else
	{
		return true;
	}
}

Ret GDF_FILE::Copy(const char *src_file, const char *des_file)
{
	FILE* des_f = NULL;
	FILE* src_f = NULL;
	int len=0;
	char buf[BEST_BUF + 4];

	if(!strcmp(src_file,des_file))
		return RET_OK;

	if((src_f=fopen(src_file,"rb"))==NULL)
	{
		printf("Can not open src_file -- %s.\n",src_file);
		return RET_QUIT;
	}
	if((des_f=fopen(des_file,"wb"))==NULL)
	{
		printf("Can not open des_file -- %s.\n",des_file);
		fclose(src_f);
		return RET_QUIT;
	}

	while(src_f != NULL)
	{
		memset(buf,0,sizeof(buf));
		fread(&buf, BEST_BUF,1,src_f);
		len = strlen(buf);
		if(len<1)
			continue;
		if(fwrite(&buf,len,1,des_f)!=1)
		{
			printf("Copy file |%s| to |%s| error!\n",src_file,des_file);
			fclose(des_f);
			fclose(src_f);
			return RET_QUIT;
		}
	} 

	fclose(des_f);
	fclose(src_f);
	return RET_OK;
}

Ret GDF_FILE::Move(const char *src_file, const char *des_file)
{
	if(strcmp(src_file,des_file)==0)
		return RET_OK;

	if( rename(src_file,des_file) != 0 )
	{
		if(this->Copy(src_file,des_file))
		{
			return RET_QUIT;
		}
		remove(src_file);
	}
	
	return RET_OK;
}

int GDF_FILE::getLines()
{
	int linect = 0; 
	char buf[255]; 
	int len; 
	char *p = NULL;
	
	fread (p, 255, 1, this->m_Fp);
	for( p = buf; len--; )
	{
		if( *p == '\n' )
		{
			++linect;
		}
		++p;
	}
	
	return linect;
}
